@keyframes ripple {
  0% {
    background-color: #0FD7F7;
    opacity: 0.3; }
  40% {
    opacity: 0.5; }
  100% {
    transform: scale(1.2);
    opacity: 0; } }

@-webkit-keyframes scroll {
  0%,
  20% {
    -webkit-transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px);
    transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px); }
  10% {
    -webkit-transform: translateY(0px) scaleY(1.2) scaleX(1.2) translateZ(0px);
    transform: translateY(0px) scaleY(1.2) scaleX(1.2) translateZ(0px);
    opacity: 1; }
  100% {
    -webkit-transform: translateY(20px) scaleY(2.5) scaleX(0.5) translateZ(0px);
    transform: translateY(20px) scaleY(2.5) scaleX(0.5) translateZ(0px);
    opacity: 0.01; } }

@keyframes scroll {
  0%,
  20% {
    -webkit-transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px);
    transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px); }
  10% {
    -webkit-transform: translateY(0px) scaleY(1.2) scaleX(1.2) translateZ(0px);
    transform: translateY(0px) scaleY(1.2) scaleX(1.2) translateZ(0px);
    opacity: 1; }
  100% {
    -webkit-transform: translateY(20px) scaleY(2.5) scaleX(0.5) translateZ(0px);
    transform: translateY(20px) scaleY(2.5) scaleX(0.5) translateZ(0px);
    opacity: 0.01; } }

@-webkit-keyframes chevron {
  0% {
    opacity: 0; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes chevron {
  0% {
    opacity: 0; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0; } }

.additional-info {
  transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
  .additional-info:hover {
    color: #0FD7F7;
    cursor: pointer; }

.three-rows {
  width: 100%;
  display: flex;
  justify-content: space-around;
  font-family: 'benton thin';
  margin-bottom: 20px; }
  .three-rows i {
    color: white;
    font-size: 35px;
    position: relative; }
    .three-rows i:after {
      content: '';
      position: absolute;
      top: -10px;
      right: -10px;
      bottom: -10px;
      left: -10px;
      border-radius: 50%;
      transform: scale(0.9);
      z-index: -1; }
    .three-rows i:hover:after {
      animation: ripple 1.3s ease-out 75ms; }

.pagination {
  display: flex;
  margin: 20px 0 10px -20px;
  position: relative; }
  @media (min-width: 950px) {
    .pagination {
      margin: 0 0 30px 0;
      transform: translateY(10px); } }
  .pagination .arrow {
    position: absolute;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
    @media (max-width: 1220px) and (min-width: 950px) {
      .pagination .arrow {
        display: none; } }
  .pagination #prev {
    left: -30px; }
    .pagination #prev:hover {
      color: #0FD7F7;
      transform: translateX(-5px); }
  .pagination #next {
    right: -30px; }
    .pagination #next:hover {
      color: #0FD7F7;
      transform: translateX(5px); }

.page-link {
  width: 20px;
  height: 20px;
  margin-left: 20px;
  background-color: rgba(255, 255, 255, 0.25);
  border-radius: 50%;
  border: solid 3px white;
  transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
  .page-link:hover {
    background-color: rgba(15, 215, 247, 0.75);
    border-color: transparent;
    transform: scale(1.6);
    cursor: pointer; }

.page-link:first-of-type {
  margin-left: 0; }

.active-page-link {
  background-color: white; }

.featured-project {
  margin: 16px 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center; }
  @media (max-width: 850px) {
    .featured-project {
      flex-direction: column-reverse; } }

h2 {
  margin-bottom: 0;
  text-align: center; }

.feature-wrapper img {
  display: block;
  width: 90%;
  max-width: 700px;
  margin: 0 auto 16px auto; }

.tldr {
  border-top: 1px solid white;
  border-bottom: 1px solid white;
  margin-bottom: 20px;
  padding-top: 10px; }
  @media (max-width: 550px) {
    .tldr {
      padding: 0 20px; } }
  .tldr h5 {
    margin: 12px 0; }
  .tldr .learn-more {
    display: inline-block;
    font-size: 18px;
    margin-top: 0px;
    color: #0FD7F7;
    cursor: pointer;
    transition: letter-spacing 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
    .tldr .learn-more:hover {
      letter-spacing: .3em; }

.additional-info {
  padding: 10px 10px 1px 10px;
  border-bottom: 1px solid rgba(15, 215, 247, 0);
  transition: all .4s ease-in; }
  .additional-info:hover {
    border-bottom: 1px solid #0FD7F7;
    padding-bottom: 7px;
    margin-bottom: -7px; }
  @media (max-width: 400px) {
    .additional-info {
      font-size: 14px; } }

.back-overview {
  text-align: center;
  font-family: 'benton thin';
  font-size: 16px;
  transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5);
  cursor: pointer;
  color: #0FD7F7; }
  .back-overview i {
    transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5);
    display: inline-block;
    transform: translate(-8px, 2px); }
  .back-overview:hover i {
    transform: translate(-14px, 2px); }

.description {
  display: none;
  margin-bottom: 30px; }
  .description h3 {
    border-bottom: 1px solid white; }
  .description a {
    color: #0FD7F7; }
  @media (max-width: 850px) {
    .description {
      padding: 0 20px; } }

.scroll-indicator {
  position: absolute;
  right: 18px;
  bottom: 70px;
  display: none;
  transform: scale(0.5); }
  .scroll-indicator .mouse {
    border: 4px solid #0FD7F7;
    border-radius: 26px;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 30px;
    height: 55px;
    -webkit-backface-visibility: hidden;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }
  .scroll-indicator .mouse::after {
    background-color: #0FD7F7;
    border-radius: 100%;
    content: "";
    position: absolute;
    top: 10px;
    left: 50%;
    margin-left: -2px;
    width: 5px;
    height: 5px;
    opacity: 1;
    -webkit-transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px);
    transform: translateY(0px) scaleY(1) scaleX(1) translateZ(0px);
    -webkit-animation: scroll 1.5s -1s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite;
    animation: scroll 1.5s -1s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite; }
  .scroll-indicator span {
    width: 14px;
    height: 15px;
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: rotate(45deg);
    transform: rotate(45deg);
    border-right: 4px solid #0FD7F7;
    border-bottom: 4px solid #0FD7F7;
    margin: 0 0 0 -8px;
    border-radius: 3px; }
  .scroll-indicator .eins,
  .scroll-indicator .zwei,
  .scroll-indicator .drei {
    -webkit-animation: chevron 2.5s infinite;
    animation: chevron 2.5s infinite; }
  .scroll-indicator .eins {
    margin-top: 36px;
    -moz-animation-delay: .1s;
    -webkit-animation-delay: .1s;
    -webkit-animation-direction: alternate; }
  .scroll-indicator .zwei {
    margin-top: 58px;
    -moz-animation-delay: .5s;
    -webkit-animation-delay: .5s;
    -webkit-animation-direction: alternate; }
  .scroll-indicator .drei {
    margin-top: 80px;
    -moz-animation-delay: .9s;
    -webkit-animation-delay: .9s;
    -webkit-animation-direction: alternate; }

header {
  grid-area: header;
  display: flex;
  flex-direction: column;
  align-items: center; }
  header img {
    width: 200px; }
    @media (max-height: 400px) {
      header img {
        width: 25vh; } }
  header h2 {
    margin: 0 5px 16px 5px;
    text-align: center;
    font-family: 'goudy';
    color: #0FD7F7;
    font-size: 18px; }
  header h4 {
    font-family: 'goudy';
    margin: 0px 15px;
    font-size: 18px; }
    header h4:nth-child(4) {
      margin: 10px; }

nav {
  grid-area: nav; }
  nav ul {
    display: flex;
    flex-direction: column;
    list-style: none;
    font-family: 'benton thin';
    text-align: center;
    padding: 0; }
    @media (max-width: 850px) {
      nav ul {
        justify-content: space-around;
        flex-direction: row;
        flex-wrap: wrap;
        margin: 20px 20px 0 20px; } }
  nav .active-link, nav li:hover {
    transform: scale(0.9);
    opacity: .6;
    position: relative; }
    nav .active-link::after, nav li:hover::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 150px;
      height: 2px;
      background-color: #0FD7F7; }
  nav li {
    margin-top: 30px;
    padding: 10px;
    line-height: 20px;
    position: relative;
    cursor: pointer;
    transition: all .3s ease-in; }

#grid .container {
  grid-area: content;
  font-family: 'goudy';
  padding: 0 42px;
  font-size: 20px; }
  @media (max-width: 550px) {
    #grid .container {
      padding: 0; } }
  @media (min-width: 850px) {
    #grid .container {
      max-height: 100vh;
      overflow: scroll; } }
  #grid .container .container-head {
    display: flex;
    align-items: center;
    justify-content: space-around; }
    @media (max-width: 950px) {
      #grid .container .container-head {
        flex-direction: column; } }
    #grid .container .container-head h1 {
      font-family: 'kristi';
      font-size: 120px;
      margin: 0 20px 20px 0px;
      font-weight: 100; }
      @media (max-width: 400px) {
        #grid .container .container-head h1 {
          font-size: 100px; } }
  #grid .container ul {
    margin-top: 40px;
    padding-left: 0;
    list-style: none; }
  #grid .container span {
    font-family: 'benton thin'; }

#about-container {
  padding: 0 20px; }
  @media (min-width: 550px) {
    #about-container {
      padding: 0 62px; } }
  @media (min-width: 850px) {
    #about-container {
      padding: 0 42px; } }

#project-container {
  height: 100%; }

#intro {
  height: 100vh;
  width: 100vw;
  animation: intro 2.6s linear forwards; }
  #intro img, #intro #slash, #intro #flick {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 50vw; }
  #intro #flick {
    transform: translate(-50%, 10%);
    background: black;
    height: 20vh;
    animation: flick 2.6s linear forwards; }
  #intro #slash {
    background: black;
    height: 50vh;
    animation: slash 2.6s linear forwards; }

@keyframes intro {
  55% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes slash {
  10% {
    transform: translate(-50%, -50%);
    width: 50vw; }
  40%, 100% {
    transform: translate(100%, -400%);
    width: 0vw; } }

@keyframes flick {
  15% {
    transform: translate(-50%, 10%);
    width: 50vw; }
  50%, 100% {
    transform: translate(-200%, 10%);
    width: 30vw; } }

#about-container .flex-wrapper {
  display: flex;
  flex-direction: column; }
  @media (max-width: 550px) {
    #about-container .flex-wrapper #bio {
      margin: 0 20px 30px; }
    #about-container .flex-wrapper .three-rows:not(:last-child) {
      margin: auto;
      flex-direction: column;
      width: 80%;
      order: 1; } }

#about-container #bio {
  text-indent: 30px; }

#about-container .skill {
  margin: 0 10px; }

#about-container p {
  font-size: 16px;
  text-align: center; }

#about-container .th {
  font-family: 'goudy';
  border-bottom: 1px solid white; }

#contact-container {
  margin-bottom: 20px; }
  @media (max-width: 550px) {
    #contact-container form {
      margin: 0 20px; } }
  #contact-container p {
    text-align: center;
    font-size: 16px;
    margin: 0px 0 10px 0; }
    @media (min-width: 1080px) {
      #contact-container p {
        font-size: 20px; } }
  #contact-container .three-rows {
    margin-top: 30px; }
  #contact-container input, #contact-container textarea {
    font-family: 'benton book';
    width: 100%;
    display: block;
    margin: 20px auto;
    border: 2px solid transparent;
    outline-color: #0FD7F7;
    height: 30px;
    letter-spacing: .5px;
    font-size: 13px;
    line-height: 18px; }
    #contact-container input:focus, #contact-container textarea:focus {
      outline: none; }
  #contact-container input {
    color: white;
    background-color: transparent;
    border-bottom: 1px dashed white; }
    #contact-container input:focus {
      border-bottom: 1px dashed #0FD7F7; }
  #contact-container textarea {
    font-family: 'benton thin';
    color: white;
    border: 1px solid white;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 7px 5px;
    border-radius: 5px;
    height: 100px;
    resize: vertical; }
    #contact-container textarea:focus {
      border: 1px solid #0FD7F7; }
  #contact-container button {
    display: block;
    width: 100px;
    margin: 0 auto;
    background-color: transparent;
    color: white;
    border-radius: 0;
    font-size: 16px;
    font-family: 'benton thin';
    padding: 5px 0 3px;
    cursor: pointer;
    transition: .2s all ease-out; }
    #contact-container button:hover {
      background-color: rgba(255, 255, 255, 0.1);
      border-color: #0FD7F7;
      color: #0FD7F7; }
    #contact-container button:focus {
      outline: none; }

body {
  margin: 0px;
  letter-spacing: .1em;
  font-family: 'benton thin';
  background: #000;
  color: #fff;
  transition: background 1s linear; }

a {
  color: white;
  text-decoration: none; }

.initially-hidden {
  display: none; }

#grid {
  min-height: 100vh;
  display: grid;
  grid-gap: 0px;
  grid-template-rows: auto 1fr auto;
  grid-template-columns: 1fr 1fr 2fr;
  grid-template-areas: "header img content" "nav img content" "footer img content"; }
  @media (max-width: 850px) {
    #grid {
      grid-gap: 0;
      grid-template-rows: repeat(4, auto);
      grid-template-columns: 1fr;
      grid-template-areas: "header" "nav" "content" "footer"; } }

#grid > * {
  padding: 0 10px; }
  @media (max-width: 850px) {
    #grid > * {
      padding: 0; } }

#grid .featured-image {
  grid-area: img;
  background-image: url(/assets/images/robot-siyan-ren.jpeg);
  background-attachment: fixed;
  transition: background-position .3s linear;
  background-size: cover; }

footer {
  grid-area: footer;
  text-align: center;
  font-size: 10px;
  padding: 10px;
  opacity: .8;
  background: rgba(255, 255, 255, 0.2); }
  footer .copy {
    padding: 4px 1px 2px 3px; }

@font-face {
  font-family: 'kristi';
  src: url("/assets/fonts/Kristi-Regular.ttf"); }

@font-face {
  font-family: 'goudy';
  src: url("/assets/fonts/OFLGoudyStM.otf"); }

@font-face {
  font-family: 'benton book';
  src: url("/assets/fonts/BentonSans Book.otf"); }

@font-face {
  font-family: 'benton thin';
  src: url("/assets/fonts/BentonSans Thin.otf"); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

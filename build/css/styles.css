.additional-infos .additional-info, nav li, nav .contact-info a {
  transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
  .additional-infos .additional-info:hover, nav li:hover, nav .contact-info a:hover {
    color: #0FD7F7;
    cursor: pointer;
    font-size: 20px; }

.pagination {
  display: flex;
  margin-left: -20px; }
  @media (min-width: 950px) {
    .pagination {
      margin-left: 0; } }

.page-link {
  width: 20px;
  height: 20px;
  margin-left: 20px;
  background-color: rgba(255, 255, 255, 0.25);
  border-radius: 50%;
  border: solid 3px white;
  transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
  .page-link:hover {
    background-color: rgba(15, 215, 247, 0.75);
    border-color: transparent;
    transform: scale(1.6);
    cursor: pointer; }

.active-page-link {
  background-color: white; }

.featured-project {
  margin: 16px 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center; }
  .featured-project h2 {
    text-align: center; }
    @media screen and (max-height: 900px) {
      .featured-project h2 {
        display: none; } }
  .featured-project img {
    display: block;
    width: 80%;
    max-width: 700px;
    margin: 0 auto 16px auto; }

.image-links {
  display: flex;
  justify-content: center; }
  @media screen and (max-height: 900px) {
    .image-links {
      display: none; } }
  .image-links .image-link {
    background-color: rgba(255, 255, 255, 0.1);
    width: 85px;
    height: 85px;
    border: solid 2px;
    border-color: #ccc #555 #fff #aaa;
    margin: 10px;
    transition: all 0.2s cubic-bezier(0.65, 0.69, 0.87, 1.5); }
    .image-links .image-link:hover {
      box-shadow: 0 0 30px #0FD7F7; }
    @media screen and (max-width: 850px) {
      .image-links .image-link {
        height: 70px;
        width: 70px; } }

.additional-infos {
  display: flex;
  justify-content: space-around;
  font-family: 'benton thin'; }
  .additional-infos .additional-info {
    padding: 10px;
    line-height: 20px; }

.description {
  margin-bottom: 30px;
  text-align: justify; }
  .description a {
    color: #0FD7F7; }
  @media (max-width: 850px) {
    .description {
      padding: 0 20px; } }

header {
  grid-area: header;
  display: flex;
  flex-direction: column;
  align-items: center; }
  header img {
    width: 200px; }
    @media (max-height: 400px) {
      header img {
        width: 25vh; } }
  header h2 {
    margin: 0 5px 16px 5px;
    text-align: center;
    font-family: 'goudy';
    color: #0FD7F7; }
  header h4 {
    font-family: 'goudy';
    margin: 0px 15px; }
    header h4:nth-child(4) {
      margin: 10px; }

nav {
  grid-area: nav; }
  nav ul {
    display: flex;
    flex-direction: column;
    list-style: none;
    font-family: 'benton thin';
    text-align: center;
    padding: 0;
    height: calc(100vh - 400px);
    justify-content: space-around; }
    @media (max-height: 500px) {
      nav ul {
        justify-content: space-between;
        height: auto; } }
    @media (max-height: 800px) {
      nav ul {
        height: auto; } }
    @media (max-width: 850px) {
      nav ul {
        flex-direction: row;
        flex-wrap: wrap;
        margin: 50px 20px 0 20px;
        height: auto; } }
  nav li {
    padding: 10px;
    line-height: 20px; }
  nav .contact-info a p {
    margin: 10px; }
  @media (max-width: 850px) {
    nav .contact-info {
      margin-top: 30px;
      flex: 0 1 100%; } }

#grid .container {
  grid-area: content;
  font-family: 'goudy';
  padding: 0 42px; }
  @media (max-width: 550px) {
    #grid .container {
      padding: 0; } }
  @media (min-width: 850px) {
    #grid .container {
      max-height: 100vh;
      overflow: scroll; } }
  #grid .container .container-head {
    display: flex;
    align-items: center;
    justify-content: space-around; }
    @media (max-width: 950px) {
      #grid .container .container-head {
        flex-direction: column; } }
    #grid .container .container-head h1 {
      font-family: 'kristi';
      font-size: 120px;
      margin: 0 0 20px 0px;
      font-weight: 100; }
  #grid .container ul {
    margin-top: 40px;
    padding-left: 0;
    list-style: none; }
  #grid .container span {
    font-family: 'benton thin'; }

#bio {
  line-height: 1.5em;
  text-indent: 30px; }

#grid #about-container {
  padding: 0 20px; }
  @media (min-width: 550px) {
    #grid #about-container {
      padding: 0 62px; } }
  @media (min-width: 850px) {
    #grid #about-container {
      padding: 0 42px; } }
  #grid #about-container a {
    color: #0FD7F7; }

#intro {
  height: 100vh;
  width: 100vw;
  animation: intro 2.6s linear forwards; }
  #intro img, #intro #slash, #intro #flick {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 50vw; }
  #intro #flick {
    transform: translate(-50%, 10%);
    background: black;
    height: 20vh;
    animation: flick 2.6s linear forwards; }
  #intro #slash {
    background: black;
    height: 50vh;
    animation: slash 2.6s linear forwards; }

@keyframes intro {
  55% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes slash {
  10% {
    transform: translate(-50%, -50%);
    width: 50vw; }
  40%, 100% {
    transform: translate(100%, -400%);
    width: 0vw; } }

@keyframes flick {
  15% {
    transform: translate(-50%, 10%);
    width: 50vw; }
  50%, 100% {
    transform: translate(-200%, 10%);
    width: 30vw; } }

body {
  margin: 0px;
  letter-spacing: .1em;
  font-family: 'benton thin';
  background: #000;
  color: #fff;
  transition: background 1s linear; }

a {
  color: white;
  text-decoration: none; }

.initially-hidden {
  display: none; }

#grid {
  min-height: 100vh;
  display: grid;
  grid-gap: 0px;
  grid-template-rows: auto 1fr auto;
  grid-template-columns: 1fr 1fr 2fr;
  grid-template-areas: "header img content" "nav img content" "footer img content"; }
  @media (max-width: 850px) {
    #grid {
      grid-gap: 0;
      grid-template-rows: repeat(4, auto);
      grid-template-columns: 1fr;
      grid-template-areas: "header" "nav" "content" "footer"; } }

#grid > * {
  padding: 0 10px; }
  @media (max-width: 850px) {
    #grid > * {
      padding: 0; } }

#grid .featured-image {
  grid-area: img;
  background-image: url(/assets/images/robot-siyan-ren.jpeg);
  background-attachment: fixed;
  transition: background-position .3s linear;
  background-size: cover; }

footer {
  grid-area: footer;
  text-align: center;
  font-size: 10px;
  padding: 10px;
  opacity: .8;
  background: rgba(255, 255, 255, 0.2); }
  footer .copy {
    padding: 4px 1px 2px 3px; }

@font-face {
  font-family: 'kristi';
  src: url("/assets/fonts/Kristi-Regular.ttf"); }

@font-face {
  font-family: 'goudy';
  src: url("/assets/fonts/OFLGoudyStM.otf"); }

@font-face {
  font-family: 'benton book';
  src: url("/assets/fonts/BentonSans Book.otf"); }

@font-face {
  font-family: 'benton thin';
  src: url("/assets/fonts/BentonSans Thin.otf"); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
